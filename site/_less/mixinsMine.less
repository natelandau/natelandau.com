// ------------------------------------
// 			DOCUMENT MANIFEST
//
//  Description: Custom mixins for use throughout the LESS files
//
//  1.  Assorted Mixins
//  2.  Images
//  3.  Media Queries
//  4.  Margin Mixins
//  5.
//  6.
//  7.
//  8.
//  9.
//  10.
//
// ------------------------------------

// ------------------------------------
// ---		Assorted Mixins
// ------------------------------------

// Sizing shortcuts
// -------------------------
.size(@height, @width) {
    width: @width;
    height: @height;
}
.square(@size) {
    .size(@size, @size);
}

.font-smoothing() {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// ------------------------------------
// ---		IMAGES
// ------------------------------------

//Grayscale an Image
.grayScale(@grayPercent) {
    filter: url("data:image/svg+xml;utf8,<svg xmlns='https://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale");
    //filter: gray;
    .ieGrayScaleFilterGuard(@grayPercent);
    -webkit-filter: grayscale(@grayPercent);
    -moz-filter: grayscale(@grayPercent);
    -ms-filter: grayscale(@grayPercent);
    -o-filter: grayscale(@grayPercent);
}
.ieGrayScaleFilterGuard(@ieFilter) when (@ieFilter < 50%) {
    filter: none;
}
.ieGrayScaleFilterGuard(@ieFilter) when (@ieFilter >= 50%) {
    filter: gray;
}

// Rounded corners
.img-rounded() {
    .border-radius(6px);
}

// Add polaroid-esque trim
.img-polaroid() {
    padding: 4px;
    background-color: #fff;
    border: 1px solid #ccc;
    border: 1px solid rgba(0, 0, 0, 0.2);
    .box-shadow(0 1px 3px rgba(0,0,0,0.1));
}

// Perfect circle
.img-circle() {
    .border-radius(500px); // crank the border-radius so it works with most reasonably sized images
}

// Frame around an element.
// White frame with drop shadow.
// -------------------------
.frame(@paddingAmount) {
    background: #fff;
    padding: @paddingAmount;
    .border-radius(2px);
    .box-shadow(1px 2px 8px @grayLight);
}

// ------------------------------------
// ---		MEDIA QUERIES
// ------------------------------------

// Landscape phones and down
@smallPhones: ~"(max-width : 530px)";

// Landscape phone to portrait tablets
@largePhones: ~"only screen and (min-width : 531px) and (max-width : 767px)";

// Tablets
@tablets: ~"only screen and (min-width : 768px) and (max-width : 979px)";
@retinaIpad: ~"only screen and (min-width : 768px) and (max-width : 1024px) and (-webkit-min-device-pixel-ratio: 2)";

//Desktops
@desktops: ~"only screen and (min-width : 980px)";
@largeScreens: ~"only screen and (min-width : 1824px)";

// Negatives
@notSmallPhones: ~"only screen and (min-width : 768px)";
@notSmallPhonesPortrait: ~"only screen and (min-width : 531px)";

// USAGE OF ABOVE CLASSES
// -------------------------
// @media @desktops {
//   footer {
//     width: 940px;
//   }
// }

// @media @tablets {
//   footer {
//     width: 768px;
//   }
// }

.hideSmall() {
    @media screen {
        @media (max-width: 900px) {
            display: none;
        }
    }
}

.hideTablets() {
    // hides from tablets
    @media screen {
        @media (min-width: 768px) {
            @media (max-width: 1024px) {
                display: none;
            }
        }
    }
}

.hidePhones() {
    // hide from small sreens (phones)
    @media screen {
        @media (min-width: 320px) {
            @media (max-width: 480px) {
                display: none;
            }
        }
    }
}

// ------------------------------------
// ---		MARGIN/Padding MIXINS
// ------------------------------------

.marginBottom(@marginSize) {
    @marginBottomValueRem: round((@marginSize * @goldenRatio), 4);
    @marginBottomValuePx: round((@marginBottomValueRem * 10), 0);
    margin-bottom: ~"@{marginBottomValuePx}px";
    margin-bottom: ~"@{marginBottomValueRem}rem";
}

.marginTop(@marginSize) {
    @marginTopValueRem: round((@marginSize * @goldenRatio), 4);
    @marginTopValuePx: round((@marginTopValueRem * 10), 0);
    margin-top: ~"@{marginTopValuePx}px";
    margin-top: ~"@{marginTopValueRem}rem";
}
.marginRight(@marginSize) {
    @marginRightValueRem: round((@marginSize * @goldenRatio), 4);
    @marginRightValuePx: round((@marginRightValueRem * 10), 0);
    margin-right: ~"@{marginRightValuePx}px";
    margin-right: ~"@{marginRightValueRem}rem";
}
.marginLeft(@marginSize) {
    @marginLeftValueRem: round((@marginSize * @goldenRatio), 4);
    @marginLeftValuePx: round((@marginLeftValueRem * 10), 0);
    margin-left: ~"@{marginLeftValuePx}px";
    margin-left: ~"@{marginLeftValueRem}rem";
}

.marginBoth(@marginSize) {
    @marginBottomValueRem: round((@marginSize * @goldenRatio), 4);
    @marginBottomValuePx: round((@marginBottomValueRem * 10), 0);
    margin-bottom: ~"@{marginBottomValuePx}px";
    margin-bottom: ~"@{marginBottomValueRem}rem";
    @marginTopValueRem: round((@marginSize * @goldenRatio), 4);
    @marginTopValuePx: round((@marginTopValueRem * 10), 0);
    margin-top: ~"@{marginTopValuePx}px";
    margin-top: ~"@{marginTopValueRem}rem";
}
.paddingBottom(@paddingSize) {
    @paddingBottomValueRem: round((@paddingSize * @goldenRatio), 4);
    @paddingBottomValuePx: round((@paddingBottomValueRem * 10), 0);
    padding-bottom: ~"@{paddingBottomValuePx}px";
    padding-bottom: ~"@{paddingBottomValueRem}rem";
}
.paddingTop(@paddingSize) {
    @paddingTopValueRem: round((@paddingSize * @goldenRatio), 4);
    @paddingTopValuePx: round((@paddingTopValueRem * 10), 0);
    padding-top: ~"@{paddingTopValuePx}px";
    padding-top: ~"@{paddingTopValueRem}rem";
}
.paddingRight(@paddingSize) {
    @paddingRightValueRem: round((@paddingSize * @goldenRatio), 4);
    @paddingRightValuePx: round((@paddingRightValueRem * 10), 0);
    padding-right: ~"@{paddingRightValuePx}px";
    padding-right: ~"@{paddingRightValueRem}rem";
}
.paddingLeft(@paddingSize) {
    @paddingLeftValueRem: round((@paddingSize * @goldenRatio), 4);
    @paddingLeftValuePx: round((@paddingLeftValueRem * 10), 0);
    padding-left: ~"@{paddingLeftValuePx}px";
    padding-left: ~"@{paddingLeftValueRem}rem";
}

.paddingBoth(@paddingSize) {
    @paddingBottomValueRem: round((@paddingSize * @goldenRatio), 4);
    @paddingBottomValuePx: round((@paddingBottomValueRem * 10), 0);
    padding-bottom: ~"@{paddingBottomValuePx}px";
    padding-bottom: ~"@{paddingBottomValueRem}rem";
    @paddingTopValueRem: round((@paddingSize * @goldenRatio), 4);
    @paddingTopValuePx: round((@paddingTopValueRem * 10), 0);
    padding-top: ~"@{paddingTopValuePx}px";
    padding-top: ~"@{paddingTopValueRem}rem";
}
